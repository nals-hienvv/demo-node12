name: Backend Deploy to Amazon ECS 

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ENV_NAME: dev
  AWS_ROLE_ARN: ${{ secrets.DEV_AWS_ROLE_ARN }}
  AWS_DEFAULT_REGION: ${{ secrets.DEV_AWS_REGION }}
  AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
  AWS_ROLE_NAME: ${{ secrets.AWS_ROLE_NAME }}
  ECR_REPOSITORY: msi-be
  ECS_CLUSTER: msi-cluster
  ECS_SERVICE: msi-be-service
  ECS_TASK: msi-be-task-def

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10  
    permissions:
      id-token: write
      contents: read
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_NAME }}
    
      - name: Login to Amazon ECR
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1
      
      # app build 
      # - name: Docker build and push
      #   id: build-image-app
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr-dev.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -f ./docker/servers/backend/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     echo NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG >> $GITHUB_ENV

      # get latest revision of TaskDefinition
      - name: get version
        env:
          ECS_TASK: ${{ env.ECS_TASK }}
        run: |
          rev=`aws ecs describe-task-definition --task-definition $ECS_TASK | jq .taskDefinition.revision`
          echo REVISION_BE=$rev >> $GITHUB_ENV
      
      # update ECS Service
      # - name: Force deployment
      #   run: |
      #     container_list=`aws ecs list-tasks --region ap-northeast-1 --cluster msi-cluster --service-name msi-be-service | awk '/msi-cluster/ {print}' | sed 's/,$//' | awk '{ sub(/^[ \t]+/, ""); print }' | awk '{printf "%s ",$0} END {print ""}'| sed -e 's/^"//' -e 's/" $//'`
      #     echo $container_list
      #     aws ecs update-service --force-new-deployment --cluster msi-cluster --service msi-be-service --task-definition msi-be-task-def:${{ env.REVISION_BE }} --desired-count 1 --region ap-northeast-1
      #     aws ecs wait tasks-stopped --cluster msi-cluster --tasks $container_list

      # update ECS Service
      - name: Force deployment
        env:
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
          ECS_TASK: ${{ env.ECS_TASK }}
        run: |
          aws ecs update-service --force-new-deployment --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK:${{ env.REVISION_BE }} --desired-count 1 

      - name: Send notification to Slack
        run: |
          successText=":github: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}*@${{ github.ref }} with commit SHA *${{ github.sha }}* completed successfully."
          failureText=":github: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}*@${{ github.ref }} with commit SHA *${{ github.sha }}* failed."
          cancelledText=":github: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Build #${{ github.run_number }}> of *${{ github.repository }}@${{ github.ref_name }}*@${{ github.ref }} with commit SHA *${{ github.sha }}* was cancelled.ðŸ˜¥"
          status="${{ (contains(needs.*.result, 'cancelled') && 'cancelled') || (contains(needs.*.result, 'failure') && 'failure') || 'success' }}"

          if [ "$status" = 'success' ]; then
          color='good'
          text=$successText
          elif [ "$status" = 'failure' ]; then
          color='danger'
          text=$failureText
          elif [ "$status" = "cancelled" ]; then
            color='warning'
            text=$cancelledText
          fi

          echo "{attachments: [{text: \"$text\", color: \"$color\"}]}" | curl \
            "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -X "POST" \
            --header "Content-Type: application/json" \
            --data-binary @-                   